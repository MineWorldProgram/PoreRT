buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'minecrell'
            url = 'http://repo.minecrell.net/releases'
        }
        maven {
            name = "sponge"
            url = "http://repo.spongepowered.org/maven"
        }
    }

    dependencies {
        classpath 'net.minecrell:VanillaGradle:2.0.3_1'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.spongepowered:mixingradle:0.4-SNAPSHOT"
    }
}

// Apply Gradle plugins
plugins {
    id 'org.spongepowered.plugin' version '0.8'
    //id 'checkstyle'

    //id 'net.minecrell.gitpatcher' version '0.8'
    id 'blue.lapis.methodremapper' version '0.2'

    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'net.minecrell.vanilla.server.library'
apply plugin: "org.spongepowered.mixin"

defaultTasks 'clean', 'build'
apply from: 'gradle/deploy.gradle'

sponge {
    plugin {
        id = 'pore'
    }
}

sourceSets.main.refMap = "mixins.pore.refmap.json"
minecraft { // reminder : keep updated
    version = '1.11'
    mappings = 'snapshot_20161124'
}

allprojects {
    // Project information
    group = 'blue.lapis'
    version = '1.0.0-SNAPSHOT'
    description = 'A Bukkit-Sponge Porting Layer'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
		maven { // needed for some reason
			name = 'bungeecord-repo'
			url = 'https://oss.sonatype.org/content/repositories/snapshots'
		}
    }
}

// Project repositories
repositories {
    jcenter()
    maven {
        name = 'lapis'
        url = 'http://repo.lapis.blue/releases'
    }
    maven {
        name = 'vault-repo'
        url = 'http://nexus.hc.to/content/repositories/pub_releases'
    }
}

/*patches {
    submodule = 'lib/Bukkit'
    target = file('Porekit')
    patches = file('patches')
}*/

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}


task applyPatches(type:Exec) {
    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        commandLine 'cmd', '/c', ".\\etc\\poredev.bat", 'update'
    } else {
        commandLine './etc/poredev', 'update'
    }
}

project('Porekit') {
    apply from: rootProject.file('bukkit.gradle')
    compileJava.dependsOn rootProject.tasks.applyPatches
}

configurations {
    shadow
    compile {
        extendsFrom shadow
    }
    shadowRuntime {
        extendsFrom shadow
    }
    runtime {
        extendsFrom shadowRuntime
    }
}

// Project dependencies
dependencies {
    compile project(':ap')
    compile("org.spongepowered:mixin:0.6.1-SNAPSHOT")

    // To update, go to https://repo.spongepowered.org/maven/org/spongepowered/spongeapi/6.1.0-SNAPSHOT/
    // Then pick latest version (or whatever version you want)
    compile 'org.spongepowered:spongeapi:6.1.0-20170814.171949-4'
    compile 'org.spongepowered:spongevanilla:1.11-6.0.0-BETA-190'
    runtime 'blue.lapis.methodremapper:tweaker:0.1'

    shadow project('Porekit')
    shadow 'net.sf.trove4j:trove4j:3.0.3'
    shadowRuntime 'mysql:mysql-connector-java:5.1.38'

    compile ('net.milkbowl.vault:VaultAPI:1.6')  {
        transitive = false
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testRuntime 'org.slf4j:slf4j-simple:1.7.13'
}

allprojects {
    // Read source files using UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-deprecation'
    ]
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events 'skipped'
    }
}

compileTestJava {
    options.compilerArgs += '-proc:none'
}


// Remap the older Bukkit methods
remap {
    inputTask = shadowJar
}

reobf {
    jar {
        mappingType = 'SEARGE'
    }
    shadowJar {}
}

jar {
    manifest {
        attributes(
                'Specification-Title': 'Bukkit',
                'Specification-Version': project('Porekit').version,
                'Specification-Vendor': 'SpigotMC',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version + versionSuffix,
                'Implementation-Vendor': 'Lapis',
                'Main-Class': 'blue.lapis.pore.util.InfoMain',
                "tweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "mixins.pore.core.json",
                'FMLAT': 'pore_at.cfg',
                "ForceLoadAsMod": true
        )
    }
}

def mappings = "lib/SpongeRemapping/mappings/v1_11_R1/" // reminder : keep updated
shadowJar {
    from { ["LICENSE", "LICENSE-AGPL", "LICENSE-MIT"] } // include licences
    from { [mappings + "vcb2pore.srg"] } // vcb2pore translation
    from (mappings + "pore_at.cfg") { // include AT configuration
        into ("META-INF/")
    }
    classifier = ''
    exclude 'remap.txt'

    configurations = [project.configurations.shadowRuntime]
    dependencies {
        exclude dependency('com.google.guava:guava')
        exclude dependency('com.google.code.gson:gson')
        exclude dependency('org.yaml:snakeyaml')
    }
}

sourceJar {
    from { ["LICENSE", "LICENSE-AGPL", "LICENSE-MIT"] }
}

/*checkstyle {
    toolVersion = '6.14.1'
    configProperties = [
            'basedir': project.projectDir,
            'severity': 'warning'
    ]
    configFile = file('etc/checkstyle.xml')
}*/

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}
